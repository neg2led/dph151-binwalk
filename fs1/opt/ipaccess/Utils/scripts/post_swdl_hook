#!/bin/bash
############################################################################
#
# IP.ACCESS -
#
# Copyright (c) 2007 ip.access Ltd.
#
############################################################################
#
# $Id: formfactor/post_swdl_hook 1.26.1.1 2012/06/18 16:44:21BST hf1 Exp  $
#
############################################################################
#
# File Description :
#       This script is invoked by swdl_client after a download operation is
#       completed. swdl_client passes the result code of the download as the
#       only argument.
#       The script performs post-install actions needed to complete a
#       download.
############################################################################

exec >/var/log/swdl_hook.log 2>&1


SDP_HOOK=/tmp/sdp_hook
ENV_FLASH_SECTOR=/dev/mtd1
HWDESC_FILE=/var/ipaccess/factory_config/hw_description.dat
NVENV=/var/ipaccess/nv_env.sh
SETNVENV=/opt/ipaccess/bin/setnv_env.sh

# Delete the sdp_hook on exit
trap "rm -f $SDP_HOOK" EXIT


swdl_status=$1
switching_bank=$2
delete_config=$3

#
# Actions if the SWDL failed.
#
if [ $swdl_status -ne 0 ]; then
    echo "SWDL Failed: $swdl_status"
    # Raise an alarm?

    exit 0
fi

echo "SWDL Hook: $*"

#
# Source the sdp hook, if one was present in the SDP.
#
[ -r $SDP_HOOK ] && . $SDP_HOOK

#
# Run script to detect downgrade and undo U-Boot relocation
#
UBOOT_RELOCATE_UNDO=/opt/ipaccess/Utils/scripts/relocate_uboot_undo
[ -x $UBOOT_RELOCATE_UNDO ] && $UBOOT_RELOCATE_UNDO

delete_old_config_files()
{
    local BANK=$1

    # If there is no config directory for the software just installed, create it.
    if [ ! -d /var/ipaccess/config_bank_$BANK ]; then
        rm -rf /var/ipaccess/config_bank_$BANK
        mkdir /var/ipaccess/config_bank_$BANK
    else
        # delete the entire contents of the config directory for the flash bank
        # which has just been installed
        rm -rf /var/ipaccess/config_bank_$BANK/*
    fi

    # If the current software is 1.1 or newer, and new software is 1.0.2 or older
    # (i.e. a downgrade) then copy the current mgr_app.cfg file to new config
    # (ALTFSVER is 'new' software, FSVER is 'current' software)
    if [ $FSVER -ge 412 -a $ALTFSVER -le 411 ]; then
        cp /var/ipaccess/config/mgr_app*.cfg /var/ipaccess/config_bank_$BANK/
    fi

    # Delete any old config files left in /var/ipaccess
    OLD_CNF_DIR=/var/ipaccess
    for OLD_CNF_FILE in 3gcntrl.cfg       \
                        baseband_mgr.cfg  \
                        imsi.cfg          \
                        managelogs.cfg    \
                        mgr_app.cfg       \
                        nwl.cfg           \
                        plrouter.cfg      \
                        rrm.cfg           \
                        security_ctrl.cfg \
                        soiprouter.cfg    \
                        uplayerapp.cfg    \
                        ftp_config.cfg
    do
        if [ -f $OLD_CNF_DIR/$OLD_CNF_FILE ]; then
            rm -f $OLD_CNF_DIR/$OLD_CNF_FILE
        fi
    done

    if [ -e $OLD_CNF_DIR/ipsec ]; then
        rm -rf $OLD_CNF_DIR/ipsec/
    fi

    # Copy of old mgr_app.cfg is moved to mgr_app.sh
}

get_alt_fs_version_and_variant()
{
    ALT_FS_DEV=/dev/mtdblock5
    [ $BOOT_BANK -eq 1 ] && ALT_FS_DEV=/dev/mtdblock6
    echo "ALT_FS_DEV=$ALT_FS_DEV"

    mkdir /tmp/altroot
    mount -o ro -t cramfs $ALT_FS_DEV /tmp/altroot 2>/dev/null || mount -o ro -t jffs2 $ALT_FS_DEV /tmp/altroot 2>/dev/null
    ALTFSVER=$(/opt/ipaccess/Utils/scripts/getVarVal /tmp/altroot/etc/sw_description.dat MAINFS_VERSION | cut -d. -f1)
    ALTFSVARIANT=$(/opt/ipaccess/Utils/scripts/getVarVal /tmp/altroot/etc/sw_description.dat FS_VARIANT | cut -d. -f1)
    umount /tmp/altroot
    rmdir /tmp/altroot

    # Also pick up the current filesystem version
    FSVER=$(/opt/ipaccess/Utils/scripts/getVarVal /etc/sw_description.dat MAINFS_VERSION | cut -d. -f1)
    FSVARIANT=$(/opt/ipaccess/Utils/scripts/getVarVal /etc/sw_description.dat FS_VARIANT | cut -d. -f1)

    echo "ALTFSVER=$ALTFSVER"
    echo "ALTFSVARIANT=$ALTFSVARIANT"
    echo "FSVER=$FSVER"
    echo "FSVARIANT=$FSVARIANT"
}

init_nv_env()
{
    # Reset the console and firewall to default values for the file system type
    # we are about to switch to. Preserve other values.
    
    # Note that if something goes wrong after this that causes the bank variable
    # to not be changed we may be left with these variables in the wrong state.
    # With new versions of rcS the setting of U-Boot variables isn't required
    # here as they are checked on startup to match the CONSOLE_ENABLED nv_env
    # variable, but older rcS scripts don't do this so it still needs to be done 
    # here to handle downgrades.
    
    # Pick out the code letter for the filesystem name
    # Assumes it is the fourth character of the string
    local ALTFSLETTER=`echo $1 | cut -c4`

    if [ "$ALTFSLETTER" = "A" ] ||
       [ "$ALTFSLETTER" = "C" ] ||
       [ "$ALTFSLETTER" = "E" ] ||
       [ "$ALTFSLETTER" = "G" ] ||
       [ "$ALTFSLETTER" = "I" ] ||
       [ "$ALTFSLETTER" = "W" ] ||
       [ "$ALTFSLETTER" = "X" ] ||
       [ "$ALTFSLETTER" = "Z" ]; then
        echo "Development release - enabling uboot and kernel consoles"
        $SETNVENV ENV_VERBOSE_CONSOLE_ENABLED TRUE
        $SETNVENV ENV_FIREWALL_DISABLED TRUE
        fw_setenv silent
        fw_setenv bootdelay 5
        fw_setenv consoledev ttyS0
    else
        echo "Production release - disabling uboot and kernel consoles"
        $SETNVENV ENV_VERBOSE_CONSOLE_ENABLED FALSE
        $SETNVENV ENV_FIREWALL_DISABLED FALSE
        fw_setenv silent on
        fw_setenv bootdelay 0
        fw_setenv consoledev /dev/null
    fi
}

#
# Determine which FS partition is mounted and the default bank.
#
BOOT_BANK=1
grep -q mtdblock6 /proc/cmdline && BOOT_BANK=2
# set the target bank - the bank variable hasn't been set yet so
# need to read it then swap it
CUR_BANK=`fw_printenv -n bank`
TARGET_BANK=1
[ "$CUR_BANK" = 1 ] && TARGET_BANK=2
echo "BOOT_BANK=$BOOT_BANK"
echo "CUR_BANK=$CUR_BANK"
echo "TARGET_BANK=$TARGET_BANK"


if [ "$delete_config" = "1" ]; then
    # Delete old config files
    delete_old_config_files $TARGET_BANK
fi

#
# A new system image has been installed or a "-switch" has been done
# if second command line parameter (switching_bank) is 1
#
if [ "$switching_bank" = "1" ]; then
    # Temporarily mount the new filesystem and extract its version and variant
    get_alt_fs_version_and_variant

    if [ $TARGET_BANK != $BOOT_BANK ]; then
        # Initialise nv_env.sh for the inactive bank.  This is the result
        # of a download or a bank swap request.
        init_nv_env $ALTFSVARIANT
    else
        # Re-initialise nv_env.sh for active bank.  This is the result of a
        # bank swap request.
        init_nv_env $FSVARIANT
    fi
fi

